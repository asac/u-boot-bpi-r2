scriptaddr=0x83000000
bpi=bananapi
board=bpi-r2
service=linux
device=mmc
partition=1:1
bootenv=uEnv.txt
kernel=uImage
loadaddr=0x80200000
#default bootargs will be overidden by buildargs
bootargs=console=ttyS0,115200 root=/dev/mmcblk0p2 rw rootwait ip=dhcp

console=earlyprintk console=tty1 fbcon=map:0 console=ttyS0,115200
root=/dev/mmcblk0p2 rootfstype=ext4 rootwait
bootopts=vmalloc=496M debug=7 initcall_debug=0
graphic=video=1920x1080 drm.debug=0x7

buildargs=setenv bootargs "board=${board} console=${console} root=${root} ${bootopts} ${graphic}"

checkenv=test -e ${device} ${partition} ${bpi}/${board}/${service}/${bootenv}
importenv=env import -t ${scriptaddr} ${filesize}
loadbootenv=if fatload ${device} ${partition} ${scriptaddr} ${bpi}/${board}/${service}/${bootenv};then run importenv;else echo "fatload (${bootenv}) failed";fi
resetenv=env default -a;printenv;

checksd=fatinfo ${device} 1:1
selectmmc=if run checksd; then echo Boot from SD ; setenv partition 1:1;else echo Boot from eMMC; setenv partition 0:1 ; fi;

newboot=run buildargs;printenv bootargs;fatload ${device} ${partition} ${loadaddr} ${bpi}/${board}/${service}/${kernel}; bootm

reloadmenu=run selectmmc;if run checkenv; then run loadbootenv; else echo file not found; fi;bootmenu;

lskernel=ls ${device} ${partition} ${bpi}/${board}/${service};
askkernel=askenv kernelinput "enter uImage-name:";

#bootmenu
boot0=run lskernel;run askkernel;if printenv kernelinput ;then setenv kernel ${kernelinput}; run newboot; fi
boot1=run selectmmc; run loadbootenv; run importenv; run newboot;

bootmenu_default=2

bootmenu_0=1. Enter kernel-name to boot from SD/EMMC.=run boot0
bootmenu_1=2. (Boot kernel from TFTP).=run bootnet
bootmenu_2=3. Boot from SD/EMMC.=run boot1

#Netboot
#ipaddr=192.168.0.11
#netmask=255.255.255.0
#serverip=192.168.0.10

#bootfile=uImage
#netbootargs=console=ttyS0,115200 root=/dev/mmcblk0p2 rw rootwait
#ip=dhcp sets ip on eth0 instead of wan

#lstftp=tftp ${loadaddr} ${serverip}:files.lst;setexpr listend ${loadaddr} + ${filesize};mw.b ${listend} 00 2;strings ${loadaddr};
#md.b ${loadaddr} 60;

#bootnet=printenv; setenv bootargs ${netbootargs};tftp ${loadaddr} ${bootfile};bootm

#separate fdt+dto
loadaddr=82000000
dtaddr=0x83f00000
fdt_high=0xffffffff

#kernel419_nodt=uImage_4.19.13-main_nodt
#fdt419=4.19.13-main.dtb
#dtolist419=bpi-r2-mac.dtb
    
loadfdt=fatload ${device} ${partition} ${dtaddr} ${bpi}/${board}/${service}/dtb/${fdt}
loadkernel=echo "loading kernel ${kernel}...";fatload ${device} ${partition} ${loadaddr} ${bpi}/${board}/${service}/${kernel}

loaddto=echo "loaddto:${dto}";fdt addr ${dtaddr};fdt resize 8192; setexpr fdtovaddr ${dtaddr} + F000;fatload ${device} ${partition} ${fdtovaddr} ${bpi}/${board}/${service}/dtb/${dto} && fdt apply ${fdtovaddr}
loaddtolist=for dto in ${dtolist} ; do run loaddto ; done

bootall=if printenv fdt; then run loadfdt; if printenv dtolist;then run loaddtolist;fi;  bootm ${loadaddr} - ${dtaddr} ;else echo "bootm"; bootm; fi
newboot2=run buildargs; printenv bootargs; run loadkernel; run bootall;

#boot19_dt=setenv kernel ${kernel419_nodt}; setenv fdt ${fdt419}; setenv dtolist ${dtolist419}; run newboot2;

#automatic reload from sd/emmc
bootdelay=0
bootcmd=setenv bootdelay 3; run reloadmenu;
